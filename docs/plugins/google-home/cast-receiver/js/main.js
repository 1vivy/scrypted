(()=>{"use strict";var __webpack_modules__={636:(module,__webpack_exports__,__webpack_require__)=>{function startPeriodicGarbageCollection(){if(__webpack_require__.g.gc)try{const e=__webpack_require__.g;if(e.gc)return setInterval((()=>{e.gc()}),1e4)}catch(e){}else console.warn("rpc peer garbage collection not available: global.gc is not exposed.")}__webpack_require__.d(__webpack_exports__,{uD:()=>RpcPeer}),module=__webpack_require__.hmd(module);class RpcProxy{peer;entry;constructorName;proxyProps;proxyOneWayMethods;constructor(e,t,r,i,o){this.peer=e,this.entry=t,this.constructorName=r,this.proxyProps=i,this.proxyOneWayMethods=o}toPrimitive(){const e=this.peer;return`RpcProxy-${e.selfName}:${e.peerName}: ${this.constructorName}`}get(e,t,r){if(t===RpcPeer.PROPERTY_PROXY_ID)return this.entry.id;if("__proxy_constructor"===t)return this.constructorName;if("__proxy_peer"===t)return this.peer;if(t===RpcPeer.PROPERTY_PROXY_PROPERTIES)return this.proxyProps;if(t===RpcPeer.PROPERTY_PROXY_ONEWAY_METHODS)return this.proxyOneWayMethods;if(t===RpcPeer.PROPERTY_JSON_DISABLE_SERIALIZATION||t===RpcPeer.PROPERTY_JSON_COPY_SERIALIZE_CHILDREN)return;if("then"===t)return;if("constructor"===t)return;if(void 0!==this.proxyProps?.[t])return this.proxyProps?.[t];return RpcPeer.handleFunctionInvocations(this,e,t,r)||new Proxy((()=>t),this)}set(e,t,r,i){return t===RpcPeer.finalizerIdSymbol&&(this.entry.finalizerId=r),!0}apply(e,t,r){if(Object.isFrozen(this.peer.pendingResults))return Promise.reject(new RPCResultError(this.peer,"RpcPeer has been killed"));const i=e()||null,o=[],n={};for(const e of r||[])o.push(this.peer.serialize(e,n));const s={type:"apply",id:void 0,proxyId:this.entry.id,args:o,method:i};return this.proxyOneWayMethods?.includes?.(i)?(s.oneway=!0,this.peer.send(s,void 0,n),Promise.resolve()):this.peer.createPendingResult(((e,t)=>{s.id=e,this.peer.send(s,t,n)}))}}class RPCResultError extends Error{cause;constructor(e,t,r,i){super(`${e.selfName}:${e.peerName}: ${t}`),this.cause=r,i?.name&&(this.name=i?.name),i?.stack&&(this.stack=`${e.peerName}:${e.selfName}\n${r?.stack||i.stack}`)}}function compileFunction(code,params,options){params=params||[];const f=`(function(${params.join(",")}) {;${code};})`;return eval(f)}try{const e=FinalizationRegistry}catch(e){window.WeakRef=class{target;constructor(e){this.target=e}deref(){return this.target}},window.FinalizationRegistry=class{register(){}}}class RpcPeer{selfName;peerName;send;idCounter=1;params={};pendingResults={};proxyCounter=1;localProxied=new Map;localProxyMap={};remoteWeakProxies={};finalizers=new FinalizationRegistry((e=>this.finalize(e)));nameDeserializerMap=new Map;constructorSerializerMap=new Map;transportSafeArgumentTypes=RpcPeer.getDefaultTransportSafeArgumentTypes();killed;killedDeferred;static finalizerIdSymbol=Symbol("rpcFinalizerId");static isRpcProxy(e){return!!e?.[RpcPeer.PROPERTY_PROXY_ID]}static getDefaultTransportSafeArgumentTypes(){const e=new Set;return e.add(Number.name),e.add(String.name),e.add(Object.name),e.add(Boolean.name),e.add(Array.name),e}static handleFunctionInvocations(e,t,r,i){return"apply"===r?(r,i)=>e.apply(t,e,i):"call"===r?(r,...i)=>e.apply(t,e,i):"toString"===r||r===Symbol.toPrimitive?(t,...r)=>e.toPrimitive():void 0}static PROPERTY_PROXY_ID="__proxy_id";static PROPERTY_PROXY_ONEWAY_METHODS="__proxy_oneway_methods";static PROPERTY_JSON_DISABLE_SERIALIZATION="__json_disable_serialization";static PROPERTY_PROXY_PROPERTIES="__proxy_props";static PROPERTY_JSON_COPY_SERIALIZE_CHILDREN="__json_copy_serialize_children";static PROBED_PROPERTIES=new Set(["then","constructor","__proxy_id","__proxy_constructor","__proxy_peer",RpcPeer.PROPERTY_PROXY_ONEWAY_METHODS,RpcPeer.PROPERTY_JSON_DISABLE_SERIALIZATION,RpcPeer.PROPERTY_PROXY_PROPERTIES,RpcPeer.PROPERTY_JSON_COPY_SERIALIZE_CHILDREN]);constructor(e,t,r){this.selfName=e,this.peerName=t,this.send=r,this.killed=new Promise(((e,t)=>{this.killedDeferred={resolve:e,reject:t}}))}createPendingResult(e){if(Object.isFrozen(this.pendingResults))return Promise.reject(new RPCResultError(this,"RpcPeer has been killed"));const t=new Promise(((t,r)=>{const i=(this.idCounter++).toString();this.pendingResults[i]={resolve:t,reject:r},e(i,(e=>r(new RPCResultError(this,e.message,e))))}));return t.catch((()=>{})),t}kill(e){const t=new RPCResultError(this,e||"peer was killed");this.killedDeferred.reject(t);for(const e of Object.values(this.pendingResults))e.reject(t);this.pendingResults=Object.freeze({}),this.params=Object.freeze({}),this.remoteWeakProxies=Object.freeze({}),this.localProxyMap=Object.freeze({}),this.localProxied.clear()}addSerializer(e,t,r){this.nameDeserializerMap.set(t,r),this.constructorSerializerMap.set(e,t)}finalize(e){delete this.remoteWeakProxies[e.id];const t={__local_proxy_id:e.id,__local_proxy_finalizer_id:e.finalizerId,type:"finalize"};this.send(t)}async getParam(e){return this.createPendingResult(((t,r)=>{const i={id:t,type:"param",param:e};this.send(i,r)}))}evalLocal(e,t,r){const i=Object.assign({},this.params,r);let o;try{o=module.require("vm").compileFunction}catch(e){o=compileFunction}return o(e,Object.keys(i),{filename:t})(...Object.values(i))}createErrorResult(e,t){e.stack=t.stack||"no stack",e.result=t.name||"no name",e.message=t.message||"no message"}deserialize(e,t){if(!e)return e;if(e[RpcPeer.PROPERTY_JSON_COPY_SERIALIZE_CHILDREN]){const r={};for(const[i,o]of Object.entries(e))r[i]=this.deserialize(o,t);return r}const{__remote_proxy_id:r,__remote_proxy_finalizer_id:i,__local_proxy_id:o,__remote_constructor_name:n,__serialized_value:s,__remote_proxy_props:a,__remote_proxy_oneway_methods:c}=e;if(r){let e=this.remoteWeakProxies[r]?.deref();return e||(e=this.newProxy(r,n,a,c)),e[RpcPeer.finalizerIdSymbol]=i,e}if(o){const e=this.localProxyMap[o];if(!e)throw new RPCResultError(this,`invalid local proxy id ${o}`);return e}const _=this.nameDeserializerMap.get(n);return _?_.deserialize(s,t):e}serialize(e,t){if(!0===e?.[RpcPeer.PROPERTY_JSON_COPY_SERIALIZE_CHILDREN]){const r={};for(const[i,o]of Object.entries(e))r[i]=this.serialize(o,t);return r}if(!e||!e[RpcPeer.PROPERTY_JSON_DISABLE_SERIALIZATION]&&this.transportSafeArgumentTypes.has(e.constructor?.name))return e;let r=e.__proxy_constructor||e.constructor?.name?.toString(),i=this.localProxied.get(e);if(i){const t=(this.proxyCounter++).toString();return i.finalizerId=t,{__remote_proxy_id:i.id,__remote_proxy_finalizer_id:t,__remote_constructor_name:r,__remote_proxy_props:e?.[RpcPeer.PROPERTY_PROXY_PROPERTIES],__remote_proxy_oneway_methods:e?.[RpcPeer.PROPERTY_PROXY_ONEWAY_METHODS]}}const{__proxy_id:o,__proxy_peer:n}=e;if(o&&n===this)return{__local_proxy_id:o};const s=this.constructorSerializerMap.get(e.constructor);if(s){r=s;const i=this.nameDeserializerMap.get(s);if(!i)throw new Error("serializer not found for "+s);const o=i.serialize(e,t);return{__remote_proxy_id:void 0,__remote_proxy_finalizer_id:void 0,__remote_constructor_name:r,__remote_proxy_props:e?.[RpcPeer.PROPERTY_PROXY_PROPERTIES],__remote_proxy_oneway_methods:e?.[RpcPeer.PROPERTY_PROXY_ONEWAY_METHODS],__serialized_value:o}}const a=(this.proxyCounter++).toString();return i={id:a,finalizerId:a},this.localProxied.set(e,i),this.localProxyMap[a]=e,{__remote_proxy_id:a,__remote_proxy_finalizer_id:a,__remote_constructor_name:r,__remote_proxy_props:e?.[RpcPeer.PROPERTY_PROXY_PROPERTIES],__remote_proxy_oneway_methods:e?.[RpcPeer.PROPERTY_PROXY_ONEWAY_METHODS]}}newProxy(e,t,r,i){const o={id:e,finalizerId:void 0},n=new RpcProxy(this,o,t,r,i),s=new Proxy("Function"===t||"AsyncFunction"===t?function(){}:n,n),a=new WeakRef(s);return this.remoteWeakProxies[e]=a,this.finalizers.register(n,o),s}async handleMessage(e,t){try{switch(e.type){case"param":{const t=e,r={},i={type:"result",id:t.id,result:this.serialize(this.params[t.param],r)};this.send(i,void 0,r);break}case"apply":{const r=e,i={type:"result",id:r.id||""},o={};try{const e=this.localProxyMap[r.proxyId];if(!e)throw new Error(`proxy id ${r.proxyId} not found`);const n=[];for(const e of r.args||[])n.push(this.deserialize(e,t));let s;if(r.method){if(!e[r.method])throw new Error(`target ${e?.constructor?.name} does not have method ${r.method}`);s=await e[r.method](...n)}else s=await e(...n);i.result=this.serialize(s,o)}catch(e){this.createErrorResult(i,e)}r.oneway||this.send(i,void 0,o);break}case"result":{const r=e,i=this.pendingResults[r.id];if(delete this.pendingResults[r.id],!i)throw new Error(`unknown result ${r.id}`);if(r.message||r.stack){const e=new RPCResultError(this,r.message||"no message",void 0,{name:r.result,stack:r.stack});return void i.reject(e)}i.resolve(this.deserialize(r.result,t));break}case"finalize":{const t=e,r=this.localProxyMap[t.__local_proxy_id];if(r){const e=this.localProxied.get(r);if(t.__local_proxy_finalizer_id&&t.__local_proxy_finalizer_id!==e?.finalizerId)break;delete this.localProxyMap[t.__local_proxy_id],this.localProxied.delete(r)}break}default:throw new Error(`unknown rpc message type ${e.type}`)}}catch(e){return void console.error("unhandled rpc error",this.peerName,e)}}}function getEvalSource(){return`\n    (() => {\n        ${RpcProxy}\n\n        ${RpcPeer}\n    \n        return {\n            RpcPeer,\n            RpcProxy,\n        };\n    })();\n    `}}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={id:e,loaded:!1,exports:{}};return __webpack_modules__[e](r,r.exports,__webpack_require__),r.loaded=!0,r.exports}__webpack_require__.d=(e,t)=>{for(var r in t)__webpack_require__.o(t,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__={};(()=>{var e=__webpack_require__(636);class t{finished=!1;resolve;reject;promise=new Promise(((e,t)=>{this.resolve=t=>{this.finished=!0,e(t)},this.reject=e=>{this.finished=!0,t(e)}}))}function r(){try{return navigator.userAgent}catch(e){}}function i(e){return new Promise((t=>{e.addEventListener("iceconnectionstatechange",(()=>{o(e)&&t(e.iceConnectionState)}))}))}function o(e){return"disconnected"===e.iceConnectionState||"failed"===e.iceConnectionState||"closed"===e.iceConnectionState}class n{pc;pcDeferred=new t;dcDeferred=new t;microphone;micEnabled=!1;onPeerConnection;options={userAgent:r(),capabilities:{audio:RTCRtpReceiver.getCapabilities?.("audio")||{codecs:void 0,headerExtensions:void 0},video:RTCRtpReceiver.getCapabilities?.("video")||{codecs:void 0,headerExtensions:void 0}},screen:{width:screen.width,height:screen.height}};constructor(){}async getOptions(){return this.options}async setMicrophone(e){if(this.microphone&&e&&!this.micEnabled){this.micEnabled=!0;const e=await navigator.mediaDevices.getUserMedia({video:!1,audio:!0});await this.microphone.replaceTrack(e.getTracks()[0])}this.microphone.track.enabled=e}close(){this.pcDeferred.promise.then((e=>{for(const t of e.getTransceivers()||[])try{t.sender?.track?.stop?.()}catch(e){}e.close()})).catch((()=>{})),this.pcDeferred.reject(new Error("iceConnectionState "+this.pc?.iceConnectionState))}async createPeerConnection(e){if(this.pc)return;const t=this.pc=new RTCPeerConnection(e.configuration);if(this.pcDeferred.resolve(t),await(this.onPeerConnection?.(t)),t.addEventListener("iceconnectionstatechange",(()=>{console.log("iceConnectionState",t.iceConnectionState),console.log("connectionState",t.connectionState),o(t)&&this.close()})),e.datachannel){const r=t.createDataChannel(e.datachannel.label,e.datachannel.dict);r.binaryType="arraybuffer",this.dcDeferred.resolve(r)}if(e.audio){const r=t.addTransceiver("audio",e.audio);"sendrecv"!==e.audio.direction&&"sendonly"!==e.audio.direction||(this.microphone=r.sender)}if(e.video)if("sendrecv"===e.video.direction||"sendonly"===e.video.direction)try{const e=await navigator.mediaDevices.getUserMedia({video:!0});for(const r of e.getTracks())t.addTrack(r)}catch(e){}else t.addTransceiver("video",e.video)}async createLocalDescription(e,t,r){await this.createPeerConnection(t);const i=new Promise((e=>{this.pc.onicecandidate=t=>{t.candidate?r?.(JSON.parse(JSON.stringify(t.candidate))):e(void 0)},this.pc.onicegatheringstatechange=()=>{"complete"===this.pc.iceGatheringState&&e(void 0)}})),o=e=>({type:e.type,sdp:e.sdp});if("offer"===e){let e=await this.pc.createOffer({offerToReceiveAudio:!!t.audio,offerToReceiveVideo:!!t.video});const n=this.pc.setLocalDescription(e);return r||(await n,await i,e=await this.pc.createOffer({offerToReceiveAudio:!!t.audio,offerToReceiveVideo:!!t.video})),o(e)}{let e=await this.pc.createAnswer();const t=this.pc.setLocalDescription(e);return r||(await t,await i,e=this.pc.currentLocalDescription||e),o(e)}}async setRemoteDescription(e,t){await this.createPeerConnection(t),await this.pc.setRemoteDescription(e)}async addIceCandidate(e){await this.pc.addIceCandidate(e)}async endSession(){}}document.addEventListener("DOMContentLoaded",(function(t){const r=new cast.framework.CastReceiverOptions;r.disableIdleTimeout=!0,cast.framework.CastReceiverContext.getInstance().start(r);const o=cast.framework.CastReceiverContext.getInstance().getPlayerManager(),s=document.getElementById("media");let a;o.setMessageInterceptor(cast.framework.messages.MessageType.LOAD,(t=>{console.log(t);const r=t.media.entity||t.media.contentId,o=t.credentials??t.media.customData.token,c=new URL(r),_=c.pathname,d={};for(const[e,t]of new URLSearchParams(c.search))d[e]=t;const p={path:_,query:d},l=eio(`wss://${c.host}`,p);return l.on("open",(async()=>{l.send(JSON.stringify({token:o}));const t=new e.uD("cast-receiver","host",((e,t)=>{try{l.send(JSON.stringify(e))}catch(e){t?.(e)}}));l.on("message",(e=>{t.handleMessage(JSON.parse(e))}));const r=new n,c=()=>{console.log("cleanup"),l.close(),r.pcDeferred.promise.then((e=>e.close()))};a?.(),a=c,l.on("close",(()=>{console.log("socket io connection close event"),c()})),r.onPeerConnection=async e=>{i(e).then(c);const t=new MediaStream(e.getReceivers().map((e=>e.track)));e.ontrack=e=>t.addTrack(e.track),s.srcObject=t,function(e){return new Promise(((t,r)=>{"connected"!==e.iceConnectionState?(e.addEventListener("iceconnectionstatechange",(()=>{"connected"===e.iceConnectionState&&t(void 0)})),i(e).then((e=>r(new Error(e))))):t(void 0)}))}(e).then((()=>{l.removeAllListeners(),l.close()}))},t.params.session=r})),null}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,